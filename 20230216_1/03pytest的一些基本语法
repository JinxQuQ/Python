https://blog.csdn.net/x530681545/article/details/125027886

### 在 【if __name__ == 'main':】 下的代码只有在文件作为脚本直接执行的情况下才会被执行，而import到其他脚本中是不会被执行的

### if __name__ == "__main__":
*      main()函数如果不带任何参数，那么执行的效果跟我们在cmd直接运行pytest命令一样，默认运行的是当前目录及子目录的所有文件夹的测试用例。
*      -s：显示程序中的print / logging输出。
*      -v：丰富信息模式, 输出更详细的用例执行信息。
*      -k：运行包含某个字符串的测试用例。如：pytest -k add XX.py表示运行XX.py中包含add的测试用例。
*      -q：简单输出模式, 不输出环境信息。
*      -x：出现一条测试用例失败就退出测试。在调试阶段非常有用，当测试用例失败时，应该先调试通过，而不是继续执行测试用例。

### pytest.main(["-s", "test_fixt.py"])

-s参数是为了显示用例的打印信息。 -q参数只显示结果，不显示过程
* -s显示：
* ![](.03pytest的一些基本语法_images/9fd15f8d.png)
* -q显示：
* ![](.03pytest的一些基本语法_images/e910cd0a.png)


## 指定运行某个用例——没看懂

1、指定运行 `cases/module1` 文件夹下的全部用例, 在命令行运行时, 先 cd 到项目的根目录： `pytest cases/module1` 

那么在 `pytest.main()` 里面等价于：

`import pytest`

运行指定文件夹目录

`pytest.main(["cases/module1"])`

2、运行指定的 `cases/module1/test_x1.py` 下的全部用例,在命令行运行时, 先cd到项目的根目录： pytest cases/module1/test_x1.py 

那么在 pytest.main() 里面等价于：

`import pytest`

运行指定py文件

`pytest.main(["cases/module1/test_x1.py"])`

3、运行指定的 `cases/module1/test_x1.py` 下的某一个用例 `test_x`, 在命令行运行时, 先cd到项目的根目录： `pytest cases/module1/test_x1.py::test_x `

那么在 `pytest.main()` 里面等价于：

`import pytest`

运行指定py文件下的test_x

`pytest.main(["cases/module1/test_x1.py::test_x"])`